GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
    event.create('blackhole_holder')
        .category('multiblocks')
        .setEUIO('in')
        .setMaxIOSize(4, 4, 4, 4)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.REPLICATOR)
})





GTCEuStartupEvents.registry('gtceu:machine', event => {
    event.create('singularity_data_confinement', 'multiblock')
        .rotationState(RotationState.ALL)
        .recipeType('blackhole_holder')
        .recipeModifiers([GTRecipeModifiers.OC_NON_PERFECT])
        .appearanceBlock(() => Block.getBlock('kubejs:highly_reinforced_radioactive_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('######CCCCCCC######', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################')
            .aisle('###CCCCAAAAACCCC###', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################')
            .aisle('##CCAAAACCCAAAACC##', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '#########E#########', '###################', '###################', '###################')
            .aisle('#CCAACCCCCCCCCAACC#', '#########A#########', '#########A#########', '#########A#########', '#########A#########', '#########A#########', '#########A#########', '#######AAAAA#######', '#########A#########', '#########A#########', '########AAA########', '########AEA########', '########AAA########', '###################', '###################')
            .aisle('#CAACCCCCCCCCCCAAC#', '###################', '###################', '###################', '###################', '###################', '######A#####A######', '###################', '###################', '###################', '###################', '#########E#########', '###################', '###################', '###################')
            .aisle('#CACCCCCCCCCCCCCAC#', '#####A#######A#####', '#####A#######A#####', '#####A#######A#####', '#####A#######A#####', '#####A#######A#####', '###################', '###################', '###################', '###################', '###################', '#########E#########', '###################', '###################', '###################')
            .aisle('CCACCCCCCCCCCCCCACC', '###################', '###################', '###################', '###################', '###################', '####A#########A####', '###################', '###################', '########DDD########', '#######DDDDD#######', '#######DDDDD#######', '#######DDDDD#######', '########DDD########', '###################')
            .aisle('CAACCCCCAAACCCCCAAC', '#########A#########', '#########A#########', '#########A#########', '###################', '###################', '#########E#########', '###A#####E#####A###', '########DDD########', '#######DAAAD#######', '######DABBBAD######', '######DABBBAD######', '######DABBBAD######', '#######DAAAD#######', '########DDD########')
            .aisle('CACCCCCACCCACCCCCAC', '########BBB########', '#########A#########', '###################', '###################', '###################', '#########E#########', '###A###########A###', '#######DDDDD#######', '######DABBBAD######', '###A##DB###BD##A###', '###A##DB###BD##A###', '###A##DB###BD##A###', '######DABBBAD######', '#######DDDDD#######')
            .aisle('CACCCCCACCCACCCCCAC', '###A###ABBBA###A###', '###A###AAAAA###A###', '###A###A#A#A###A###', '###A#####A#####A###', '###A#####A#####A###', '###A###EEEEE###A###', '###A###E###E###A###', '###A###DDDDD###A###', '###A##DABBBAD##A###', '###A##DB###BD##A###', '##EEEEDB###BDEEEE##', '###A##DB###BD##A###', '######DABBBAD######', '#######DDDDD#######')
            .aisle('CACCCCCACCCACCCCCAC', '########BBB########', '#########A#########', '###################', '###################', '###################', '#########E#########', '###A###########A###', '#######DDDDD#######', '######DABBBAD######', '###A##DB###BD##A###', '###A##DB###BD##A###', '###A##DB###BD##A###', '######DABBBAD######', '#######DDDDD#######')
            .aisle('CAACCCCCAAACCCCCAAC', '#########A#########', '#########A#########', '#########A#########', '###################', '###################', '#########E#########', '###A#####E#####A###', '########DDD########', '#######DAAAD#######', '######DABBBAD######', '######DABBBAD######', '######DABBBAD######', '#######DAAAD#######', '########DDD########')
            .aisle('CCACCCCCCCCCCCCCACC', '###################', '###################', '###################', '###################', '###################', '####A#########A####', '###################', '###################', '########DDD########', '#######DDDDD#######', '#######DDDDD#######', '#######DDDDD#######', '########DDD########', '###################')
            .aisle('#CACCCCCCCCCCCCCAC#', '#####A#######A#####', '#####A#######A#####', '#####A#######A#####', '#####A#######A#####', '#####A#######A#####', '###################', '###################', '###################', '###################', '###################', '#########E#########', '###################', '###################', '###################')
            .aisle('#CAACCCCCCCCCCCAAC#', '###################', '###################', '###################', '###################', '###################', '######A#####A######', '###################', '###################', '###################', '###################', '#########E#########', '###################', '###################', '###################')
            .aisle('#CCAACCCCCCCCCAACC#', '#########A#########', '#########A#########', '#########A#########', '#########A#########', '#########A#########', '#########A#########', '#######AAAAA#######', '#########A#########', '#########A#########', '########AAA########', '########AEA########', '########AAA########', '###################', '###################')
            .aisle('##CCAAAACCCAAAACC##', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '#########E#########', '###################', '###################', '###################')
            .aisle('###CCCCAAAAACCCC###', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################')
            .aisle('######CCCKCCC######', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################', '###################')
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))
            .where("A", Predicates.blocks('kubejs:stellar_powered_casing'))
            .where("B", Predicates.blocks('kubejs:awakened_draconium_coil_block'))
            .where("D", Predicates.blocks('gtceu:chaos_block'))
            .where("E", Predicates.blocks('gtceu:antimatter_frame'))
            .where("C", Predicates.blocks('kubejs:highly_reinforced_radioactive_casing')
                .or(Predicates.abilities(PartAbility.EXPORT_ITEMS, PartAbility.EXPORT_FLUIDS, PartAbility.IMPORT_ITEMS, PartAbility.IMPORT_FLUIDS)
                .or(Predicates.abilities(PartAbility.INPUT_LASER))
                .or(Predicates.abilities(PartAbility.MAINTENANCE)))
            )
            .where('#', Predicates.any())
            .build()
        )
        .workableCasingRenderer("kubejs:block/casings/highly_reinforced_radioactive_casing", 'gtceu:block/multiblock/power_substation', true)
})